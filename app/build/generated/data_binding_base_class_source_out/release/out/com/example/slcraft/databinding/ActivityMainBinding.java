// Generated by view binder compiler. Do not edit!
package com.example.slcraft.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.slcraft.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button Bt1;

  @NonNull
  public final TextView Tex1;

  @NonNull
  public final TextView Txt2;

  @NonNull
  public final EditText UinpuT4;

  @NonNull
  public final EditText Uinput1;

  @NonNull
  public final EditText Uinput2;

  @NonNull
  public final EditText Uinput3;

  private ActivityMainBinding(@NonNull ConstraintLayout rootView, @NonNull Button Bt1,
      @NonNull TextView Tex1, @NonNull TextView Txt2, @NonNull EditText UinpuT4,
      @NonNull EditText Uinput1, @NonNull EditText Uinput2, @NonNull EditText Uinput3) {
    this.rootView = rootView;
    this.Bt1 = Bt1;
    this.Tex1 = Tex1;
    this.Txt2 = Txt2;
    this.UinpuT4 = UinpuT4;
    this.Uinput1 = Uinput1;
    this.Uinput2 = Uinput2;
    this.Uinput3 = Uinput3;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.Bt1;
      Button Bt1 = ViewBindings.findChildViewById(rootView, id);
      if (Bt1 == null) {
        break missingId;
      }

      id = R.id.Tex1;
      TextView Tex1 = ViewBindings.findChildViewById(rootView, id);
      if (Tex1 == null) {
        break missingId;
      }

      id = R.id.Txt2;
      TextView Txt2 = ViewBindings.findChildViewById(rootView, id);
      if (Txt2 == null) {
        break missingId;
      }

      id = R.id.UinpuT4;
      EditText UinpuT4 = ViewBindings.findChildViewById(rootView, id);
      if (UinpuT4 == null) {
        break missingId;
      }

      id = R.id.Uinput1;
      EditText Uinput1 = ViewBindings.findChildViewById(rootView, id);
      if (Uinput1 == null) {
        break missingId;
      }

      id = R.id.Uinput2;
      EditText Uinput2 = ViewBindings.findChildViewById(rootView, id);
      if (Uinput2 == null) {
        break missingId;
      }

      id = R.id.Uinput3;
      EditText Uinput3 = ViewBindings.findChildViewById(rootView, id);
      if (Uinput3 == null) {
        break missingId;
      }

      return new ActivityMainBinding((ConstraintLayout) rootView, Bt1, Tex1, Txt2, UinpuT4, Uinput1,
          Uinput2, Uinput3);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
